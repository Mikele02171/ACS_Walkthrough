NOTES:
Currently using Windows not Mac.

-Download Python 3.10 from the Microsoft Store.
-Download Visual Studio Code


In terminal (Using Windows Powershell)
-Run python --version (copy exactly) (if it works)
-Then run python (type in python)
You can run def functions, maths operations and print out strings, ints etc.. 
-If you want to exit
use exit() and Clt L to clear everything in terminal. 

If you haven't installed git into Windows Terminal 

Click on this link to download git to your Windows Terminal 

https://git-scm.com/download/win

Go back into Windows Powershell and type in the following one by one (i.e run it, type it, run it, etc...) in order all of them should work in this order:
git clone https://github.com/Mikele02171/ACS_Walkthrough 
NOTE: copy where you keep your respository in your github account!

ls
cd ACS_Walkthrough/
ls

Trouble to install Virtual environment into Windows Powershell terminal?, First
Try
pip install --user virtualenv
python -m virtualenv venv

To activate the Virtual environment 
If you get this error,
venv/Scripts/activate : File C:\Users\mikel\ACS_Walkthrough\venv\Scripts\Activate.ps1 cannot be loaded because running
scripts is disabled on this system. For more information, see about_Execution_Policies at
https:/go.microsoft.com/fwlink/?LinkID=135170.
At line:1 char:1
+ venv/Scripts/activate
+ ~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : SecurityError: (:) [], PSSecurityException
    + FullyQualifiedErrorId : UnauthorizedAccess

Set-ExecutionPolicy Unrestricted -Scope Process

Why? According to Microsoft Tech Support it might be a problem with Execution Policy Settings. To fix it,
you should try executing Set-ExecutionPolicy Unrestricted -Scope Process (as mentioned in the comment section by @wtsiamruk)
in your PowerShell window. This would allow running virtualenv in the current PowerShell session. 

Then type the following again:

venv/Scripts/activate

Should get this, 
(venv) PS C:\Users\mikel\ACS_Walkthrough> 

This means your directory has entered in the virtual environment. 

Type in the following one by one (i.e run it, type it, run it, etc...) in order all of them should work in this order:

pip install django
pip install gunicorn
pip freeze > requirements.txt 
django-admin startproject demo
ls
cd demo
python manage.py startapp mypage

NOTE: mypage is just a title for the app, you can change the title later. 

Run this in terminal:
code .. 

NOTE: At this point you should install Visual Studio Code by now. 

Follow exactly as instructed in the ACS_masterclass/django_walkthrough.md from this github repository.
Step D - Tweaking Some Settings...
Open that "inner" demo folder in VS Code, and you'll find a file called settings.py. Scrolling through this file, you should find a section like this:

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'mypage',
]

Go back to terminal and type in the following one by one (i.e run it, type it, run it, etc...) all of them should work:
python manage.py migrate 
python manage.py runserver

-Open the link http://127.0.0.1:8000/ you get your first django website. 

Again, follow exactly as instructed in the ACS_masterclass/django_walkthrough.md from this github repository.
Step E - Time to Code!
-Create a new folder called templates, inside of your mypage directory.
-Inside of that folder, create a file called homepage.html
-Let's add some basic HTML code to that file, to define what our users will see. If you know your way around HTML you can add whatever you like, but here's some fun boilerplate to throw in if you prefer:

NOTE: Implicitly follow exactly as it follows (must be done manually and carefully).

-Navigate to the /mypage/views.py file in VSCode, and add the following code to that file:
def homepage(request):
    return render(request, 'homepage.html')

-Next we need to define the address that this page will be available at inside our app. Let's add a urls.py file to the mypage directory:
from django.urls import path
from . import views

urlpatterns = [
    path('', views.homepage, name='homepage'),
]

-The page is available from within the app, right now, but next we need to make it so that we can access that app from within the project as a whole. To do this we need to add a little code to a different urls.py file - the one in the demo directory. This file already exists, so we can just add a little code to it:

(Oliver's notation)

from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('homepage/', include('mypage.urls'))
]

(My notation)

from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('mypage.urls'))
]


Type in the following into terminal:
python manage.py runserver 

-Open the link http://127.0.0.1:8000/ you get your updated django website. 

Type in the following into terminal one by one (i.e run it, type it, run it, etc...) in order all of them should work in this order:
git add .
git commit -m "<add_a_message_here_explaining_your_commit"
git push origin main

This concludes the demonstration!



